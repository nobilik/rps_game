// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bets": {
            "get": {
                "description": "gives list of active bets that other users made with current user id as acceptor",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bets"
                ],
                "summary": "gives list of active bets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Bet"
                            }
                        }
                    },
                    "401": {
                        "description": "auth required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "New bet",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "bets"
                ],
                "summary": "User place bet with amount, item name and another user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "a new bet data",
                        "name": "betRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.NewBetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bet placed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Some error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "auth required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bets/{action}": {
            "patch": {
                "description": "New bet",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "bets"
                ],
                "summary": "User place bet with amount, item name and another user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "decline or accept",
                        "name": "action",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "a bet response data",
                        "name": "bet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.BetResponseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "some result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Some error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "auth required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Gives value of X-Auth-Token for authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login with login-pass",
                "parameters": [
                    {
                        "description": "login-pass",
                        "name": "LoginData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "bad login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "delete": {
                "description": "Deletes current auth session",
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Some err",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Adds user to db",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register with login-pass",
                "parameters": [
                    {
                        "description": "login-pass",
                        "name": "RegisterData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Some error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "just example",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "gives admin stats for all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "gives list of own transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "gives list of own transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "401": {
                        "description": "auth required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions/{action}": {
            "post": {
                "description": "top up or withdraw",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Manages own balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "action",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "object with amount",
                        "name": "transactionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.TransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "some result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Some error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "auth required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "gives list of users excluding self",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "gives list of all registered users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "401": {
                        "description": "auth required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong with provided data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginData": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "core.BetResponseRequest": {
            "type": "object",
            "properties": {
                "acceptor_id": {
                    "type": "integer"
                },
                "item": {
                    "type": "string"
                }
            }
        },
        "core.NewBetRequest": {
            "type": "object",
            "properties": {
                "acceptor_id": {
                    "type": "integer"
                },
                "amount": {
                    "type": "number"
                },
                "item": {
                    "type": "string"
                }
            }
        },
        "core.TransactionRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Bet": {
            "description": "Bet represents a betting record",
            "type": "object",
            "properties": {
                "acceptor_id": {
                    "description": "it's another user id",
                    "type": "integer"
                },
                "acceptor_item_value": {
                    "type": "integer"
                },
                "amount": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "item_value": {
                    "type": "integer"
                },
                "result": {
                    "description": "it's nil on status Pending",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ResultType"
                        }
                    ]
                },
                "status": {
                    "$ref": "#/definitions/models.BetStatus"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.BetStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-comments": {
                "Accepted": "= played",
                "Declined": "can be declined by acceptor"
            },
            "x-enum-varnames": [
                "Pending",
                "Declined",
                "Accepted"
            ]
        },
        "models.ResultType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "Loss",
                "Equal",
                "Winning"
            ]
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "bet_id": {
                    "description": "for win \u0026 loss",
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/models.TransactionType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.TransactionType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "TopUp",
                "Withdrawal",
                "Win",
                "Lose"
            ]
        },
        "models.User": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "login": {
                    "description": "we'll use email",
                    "type": "string"
                },
                "password": {
                    "description": "we store it encrypted",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "RPS game API - OpenAPI 2.0",
	Description:      "simple RPS game",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
